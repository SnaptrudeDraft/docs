{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.snaptrude.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/import/permission": {
      "get": {
        "description": "Checks for two things for a given floorkey: \n 1. floorkey exists in Snaptrude \n 2. user has edit permission to the project",
        "parameters": [
          {
            "name": "floorkey",
            "in": "query",
            "description": "floorkey of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checks for two things for a given floorkey",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["access"],
                  "type": "object",
                  "properties": {
                    "access": {
                      "description": "Either the user has access or not",
                      "type": "boolean"
                    },
                    "message": {
                      "description": "Success/failure (invalid)",
                      "type": "string"
                    },
                    "image": {
                      "description": "Latest screenshot of the project. Given as a path",
                      "type": "string"
                    },
                    "name": {
                      "description": "Project name",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/import/state": {
      "get": {
        "description": "Used to get the import state for given floorkey. The possible responses are: \n 1. \"NA\": Not available \n 2. \"NEW\": New project imported from revit \n 3. \"RFA\": RFA Pending Import \n 4. \"MODIFIED\": Modified project \n 5. \"DONE\": Imported project that is already upto date",
        "parameters": [
          {
            "name": "floorkey",
            "in": "query",
            "description": "floorkey of the project",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["project"],
                  "type": "object",
                  "properties": {
                    "project": {
                      "description": "",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Project name",
                          "type": "string"
                        },
                        "importStates": {
                          "type": "object",
                          "description": "",
                          "properties": {
                            "revitImportState": {
                              "description": "Revit import state",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "floorkey does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "no project",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unknown exception / server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "Internal Server Error",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Used to get the import state for given floorkey. The possible values to set are: \n 1. \"NA\": Not available \n 2. \"NEW\": New project imported from revit \n 3. \"RFA\": RFA Pending Import \n 4. \"MODIFIED\": Modified project \n 5. \"DONE\": Imported project that is already upto date",
        "parameters": [
          {
            "name": "floorkey",
            "in": "query",
            "description": "floorkey of the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revitImportState",
            "in": "query",
            "description": "must be NA/NEW/RFA/MODIFIED/DONE",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["project"],
                  "type": "object",
                  "properties": {
                    "project": {
                      "description": "",
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "Project name",
                          "type": "string"
                        },
                        "importStates": {
                          "type": "object",
                          "description": "",
                          "properties": {
                            "revitImportState": {
                              "description": "Revit import state",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "floorkey does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "no project",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "unknown exception / server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "Internal Server Error",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "unknown exception / server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "Internal Server Error",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/s3/presigned-url/upload": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path inside AWS S3 bucket to upload at",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["url", "fields"],
                  "type": "object",
                  "properties": {
                    "url": {
                      "description": "https://snaptrude-xyz.s3.amazonaws.com/",
                      "type": "string"
                    },
                    "fields": {
                      "description": "authorization details",
                      "type": "object",
                      "properties": {
                        "x-amz-algorithm": {
                          "description": "authorization algorithm",
                          "type": "string"
                        },
                        "key": {
                          "description": "path to upload at",
                          "type": "string"
                        },
                        "x-amz-signature": {
                          "description": "AWS signature",
                          "type": "string"
                        },
                        "policy": {
                          "description": "policy",
                          "type": "string"
                        },
                        "x-amz-date": {
                          "description": "date",
                          "type": "string"
                        },
                        "x-amz-credential": {
                          "description": "credential",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/s3/presigned-url/download": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path inside AWS S3 bucket to download from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["url"],
                  "type": "object",
                  "properties": {
                    "url": {
                      "description": "https://snaptrude-xyz.s3.amazonaws.com/",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/folderWithoutProject": {
      "post": {
        "description": "Retrieve folders from my workspace, restricted to a single level.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Determines the number of folders to bypass before retrieving the initial folder. (Set to 0 if not relevant)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines the maximum count of folders to be fetched.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "query",
            "description": "(optional) Represents the parent folder's unique ID. If not specified, the API call will retrieve folders within my workspace.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["folders"],
                  "type": "object",
                  "properties": {
                    "folders": {
                      "description": "folders from workspace",
                      "type": "array",
                      "items": {
                        "description": "Folder",
                        "type": "object",
                        "properties": {
                          "all_parents": {
                            "description": "",
                            "type": "string"
                          },
                          "name": {
                            "description": "name of the folder",
                            "type": "string"
                          },
                          "user_dashboard": {
                            "description": "user id",
                            "type": "integer",
                            "format": "int64"
                          },
                          "deleted": {
                            "description": "",
                            "type": "boolean"
                          },
                          "immediate_parent": {
                            "description": "parent folder id, folder is at root level so null",
                            "type": "string"
                          },
                          "created_by": {
                            "description": "user id who created the folder",
                            "type": "integer",
                            "format": "int64"
                          },
                          "last_updated_by": {
                            "description": "user id who last updated the folder",
                            "type": "integer",
                            "format": "int64"
                          },
                          "team_dashboard": {
                            "description": "",
                            "type": "string"
                          },
                          "id": {
                            "description": "folder id",
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "message": {
                      "description": "Success/failure (invalid)",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/team/{teamId}/folderWithoutProject": {
      "post": {
        "description": "Retrieve folders from my workspace, restricted to a single level.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "team id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Determines the number of folders to bypass before retrieving the initial folder. (Set to 0 if not relevant)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Defines the maximum count of folders to be fetched.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folder",
            "in": "query",
            "description": "(optional) Represents the parent folder's unique ID. If not specified, the API call will retrieve folders within my workspace.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["folders"],
                  "type": "object",
                  "properties": {
                    "folders": {
                      "description": "folders from workspace",
                      "type": "array",
                      "items": {
                        "description": "Folder",
                        "type": "object",
                        "properties": {
                          "all_parents": {
                            "description": "",
                            "type": "string"
                          },
                          "name": {
                            "description": "name of the folder",
                            "type": "string"
                          },
                          "user_dashboard": {
                            "description": "user id",
                            "type": "integer",
                            "format": "int64"
                          },
                          "deleted": {
                            "description": "",
                            "type": "boolean"
                          },
                          "immediate_parent": {
                            "description": "parent folder id, folder is at root level so null",
                            "type": "string"
                          },
                          "created_by": {
                            "description": "user id who created the folder",
                            "type": "integer",
                            "format": "int64"
                          },
                          "last_updated_by": {
                            "description": "user id who last updated the folder",
                            "type": "integer",
                            "format": "int64"
                          },
                          "team_dashboard": {
                            "description": "",
                            "type": "string"
                          },
                          "id": {
                            "description": "folder id",
                            "type": "integer",
                            "format": "int64"
                          }
                        }
                      }
                    },
                    "message": {
                      "description": "Success/failure (invalid)",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/newBlankProject": {
      "post": {
        "description": "Create a new blank project in Snaptrude",
        "parameters": [
          {
            "name": "project_name",
            "in": "query",
            "description": "name of the project",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "team_id",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["project"],
                  "type": "object",
                  "properties": {
                    "project": {
                      "description": "folders from workspace",
                      "type": "object",
                      "properties": {
                        "updated": {
                          "description": "last updated date and time",
                          "type": "string"
                        },
                        "added": {
                          "description": "added on date and time",
                          "type": "string"
                        },
                        "key": {
                          "description": "floor key",
                          "type": "string"
                        },
                        "speckleStreamId": {
                          "description": "",
                          "type": "string"
                        },
                        "isSpeckleImportDone": {
                          "description": "",
                          "type": "boolean"
                        },
                        "threeDUrl": {
                          "description": "Image path in Django server",
                          "type": "string"
                        },
                        "desc": {
                          "description": "",
                          "type": "string"
                        },
                        "importStates": {
                          "type": "object",
                          "description": "",
                          "properties": {
                            "revitImportState": {
                              "description": "Revit import state (NA/NEW/RFA/MODIFIED/DONE)",
                              "type": "string"
                            }
                          }
                        },
                        "name": {
                          "description": "project name",
                          "type": "string"
                        },
                        "url": {
                          "description": "",
                          "type": "string"
                        },
                        "createdby": {
                          "description": "user name",
                          "type": "string"
                        },
                        "public": {
                          "description": "",
                          "type": "boolean"
                        }
                      }
                    },
                    "message": {
                      "description": "Project created successfully.",
                      "type": "string"
                    },
                    "floorkey": {
                      "description": "floor key",
                      "type": "string"
                    },
                    "error": {
                      "description": "error code",
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/user/teams/active": {
      "post": {
        "description": "Get list of all active teams. This data is further used to get workspaces of a user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["teams"],
                  "type": "object",
                  "properties": {
                    "teams": {
                      "description": "active teams list",
                      "type": "array",
                      "items": {
                        "description": "Team",
                        "type": "object",
                        "properties": {
                          "domain": {
                            "description": "",
                            "type": "string"
                          },
                          "isManuallyPaid": {
                            "description": "",
                            "type": "boolean"
                          },
                          "role": {
                            "description": "",
                            "type": "string"
                          },
                          "name": {
                            "description": "name of the team",
                            "type": "string"
                          },
                          "members": {
                            "description": "members of the team",
                            "type": "array",
                            "items": {
                              "description": "TeamMember",
                              "type": "object",
                              "properties": {
                                "status": {
                                  "description": "",
                                  "type": "string"
                                },
                                "team_member_id": {
                                  "description": "",
                                  "type": "integer",
                                  "format": "int64"
                                },
                                "access_level": {
                                  "description": "",
                                  "type": "string"
                                },
                                "role": {
                                  "description": "",
                                  "type": "string"
                                },
                                "user": {
                                  "description": "user details",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "user id",
                                      "type": "integer",
                                      "format": "int64"
                                    },
                                    "name": {
                                      "description": "user name",
                                      "type": "string"
                                    },
                                    "email": {
                                      "description": "user email",
                                      "type": "string"
                                    }
                                  }
                                },
                                "email": {
                                  "description": "user email",
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "admin": {
                            "description": "admin details",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "admin id",
                                "type": "integer",
                                "format": "int64"
                              },
                              "name": {
                                "description": "admin name",
                                "type": "string"
                              },
                              "email": {
                                "description": "admin email",
                                "type": "string"
                              }
                            }
                          },
                          "membersCount": {
                            "description": "number of members in the team",
                            "type": "integer",
                            "format": "int64"
                          },
                          "id": {
                            "description": "team id",
                            "type": "integer",
                            "format": "int64"
                          },
                          "manualPlanLastsUntil": {
                            "description": "",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/team/{teamId}/getrole": {
      "post": {
        "description": "Get list of permissions for each role in a team. This data is further used to check weather the admin or creator has permission to create project.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "team id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": ["team"],
                  "type": "object",
                  "properties": {
                    "team": {
                      "description": "",
                      "type": "object",
                      "properties": {
                        "role": {
                          "description": "admin | creator | viewer | editor",
                          "type": "string"
                        },
                        "permissions": {
                          "description": "",
                          "type": "array",
                          "items": {
                            "description": "permission",
                            "type": "object",
                            "properties": {
                              "create_project": {
                                "description": "create project permission",
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "id": {
                          "description": "team id",
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Plant": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": ["id"],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": ["error", "message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
